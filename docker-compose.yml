services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
    container_name: es
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ports:
      - "9200:9200"
    networks:
      - final-test
    healthcheck:
      test: [ "CMD-SHELL", "curl -f -X GET 'http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=1s' || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 12

  kibana:
    image: docker.elastic.co/kibana/kibana:8.15.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy

    networks:
      - final-test

  kafka:
    image: apache/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - final-test


  mongodb:
    image: mongo:6.0
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - final-test

  handel_files:
    build:
      context: .
      dockerfile: handel_files/Dockerfile
    environment:
      - KAFKA_BROKER=kafka:9092
      - FILE_PATH=/app/podcasts
      - TOPIC=podcasts
    volumes:
      - C:/podcasts:/app/podcasts
    ports:
      - "8001:8001"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - final-test

  handel_topics:
    build:
      context: .
      dockerfile: handling_topics/Dockerfile
    environment:
      - KAFKA_BROKER=kafka:9092
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_DB=mu'azins
      - MONGO_AUTH_DB=admin
      - ES_HOSTS=elasticsearch
      - FILE_PATH=/app/podcasts
    ports:
      - "8002:8002"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - final-test
    volumes:
      - C:/podcasts:/app/podcasts



  stt:
    build:
      context: .
      dockerfile: STT/Dockerfile
    ports:
      - "8003:8003"
    environment:
      - KAFKA_BROKER=kafka:9092
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_DB=mu'azins
      - MONGO_AUTH_DB=admin
      - ES_HOSTS=elasticsearch
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - final-test


  content_classification:
    build:
      context: .
      dockerfile: content_classification/Dockerfile
    environment:
      - KAFKA_BROKER=kafka:9092
      - ES_HOSTS=elasticsearch
      - POINTS=1
      - HIGH_SCORE_THREAT_LEVEL=15
      - MEDIUM_SCORE_THREAT_LEVEL=6
    ports:
      - "8004:8004"
    depends_on:
     elasticsearch:
      condition: service_healthy
    networks:
      - final-test

  endpoints:
    build:
      context: .
      dockerfile: endpoints/Dockerfile
    environment:
      - ES_HOSTS=elasticsearch
    ports:
      - "8005:8005"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - final-test


volumes:
  mongo_data:

networks:
  final-test:
    driver: bridge
